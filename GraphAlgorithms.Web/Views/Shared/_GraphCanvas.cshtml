@model GraphCanvasModel

@using static GraphAlgorithms.Shared.Shared;

@{
    string ViewID = string.Format("GraphCanvasView_{0}", Guid.NewGuid().ToString().Replace("-", ""));
    string ViewDataObj = string.Format("{0}_ViewData", ViewID);

    List<GraphPropertyEnum> propertiesVisibleInInitialHeader =
        new List<GraphPropertyEnum>() { GraphPropertyEnum.Order, GraphPropertyEnum.Size, GraphPropertyEnum.WienerIndex };
}

<div id="@ViewID" class="graph-canvas-container @(Model.ContainerClasses) @(Model.IsVisible ? "" : "hidden")">
    <div class="canvas-header group @(Model.ShowHeader ? "flex" : "hidden")">
        <div class="flex flex-row w-full">
            <div class="w-1/3"><b>ID:</b> @Model.ID</div>
            <div class="w-1/3"><b>Order:</b> @Model.Graph.nodes.Count</div>
            <div class="w-1/3"><b>Size:</b> @Model.Graph.edges.Count</div>
        </div>
        <div class="flex flex-row w-full">
            <div class="w-full"><b>Wiener Index:</b> @Model.Graph.score</div>
        </div>
        <div class="flex flex-row w-full">
            <div class="w-full"><b>Classes:</b> @Model.Graph.classNames</div>
        </div>
        <div class="canvas-header-properties-container hidden group-hover:flex">
            <div class="w-full text-center">Properties</div>
            
            @* Show Graph additional properties *@
            @foreach (var propertyMapping in Model.Graph.properties.PropertyMappings)
            {
                if (propertiesVisibleInInitialHeader.Contains(propertyMapping.Key))
                    continue;

                if (propertyMapping.Value.Getter() == null)
                    continue;

                string propertyValueStr = Model.Graph.properties.ConvertGraphPropertyToDisplayString(propertyMapping.Value);

                <div class="w-full"><b>@(propertyMapping.Value.Name):</b> @(propertyValueStr)</div>
            }
        </div>
    </div>

    <div class="context-menu">
        <div class="item context-item-add-node">Add Node</div>
        <div class="item context-item-delete-node">Delete Node</div>
        <div class="item context-item-delete-edge">Delete Edge</div>
        <div class="item context-item-start-adding-edge">Start Adding Edge</div>
        <div class="item context-item-finish-adding-edge">Finish Adding Edge</div>
    </div>

    <div class="graph-and-status-bar-container bg-white">
        <div class="graph-container"></div>
        <div class="status-bar @(Model.ShowFooter ? "" : "hidden")">
            <span class="status-msg"></span>

            <div class="status-bar-buttons">
                <a class="btn-edit @(Model.ShowEditButton ? "" : "hidden")" href="@Url.Action("Edit", "GraphDrawing", new { id = Model.ID })">
                    <i class="fas fa-pencil-alt"></i> Edit
                </a>
                <button type="button" class="btn-calculate @(Model.ShowCalculateButton ? "" : "hidden")">
                    <i class="fas fa-solid fa-calculator"></i> Calculate
                </button>
                <button type="button" class="btn-save @(Model.ShowSaveButton ? "" : "hidden")">
                    <i class="fas fa-save"></i> Save
                </button>
                <button type="button" class="btn-save-as-new @(Model.ShowSaveAsNewButton ? "" : "hidden")">
                    <i class="fas fa-save"></i><i class="fas fa-plus"></i> Save as New
                </button>
                <button type="button" class="btn-fullscreen">
                    <i class="fa fa-expand" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var @(ViewDataObj) = {
        viewID: "@ViewID",
        graphID: @Model.Graph.id,
        isEditable: @(Model.IsEditable ? "true" : "false"),
        canvasContainer: $("#@(ViewID).graph-canvas-container"),
        contextMenu: $("#@ViewID .context-menu"),
        canvasHeader: $("#@ViewID .canvas-header"),
        canvasHeaderPropertiesContainer: $("#@ViewID .canvas-header .canvas-header-properties-container"),
        graphAndStatusBarContainer: $("#@ViewID .graph-and-status-bar-container"),
        graphContainer: $("#@ViewID .graph-container"),
        statusBar: $("#@ViewID .status-bar"),
        statusMsg: $("#@ViewID .status-msg"),
        btnSave: $("#@ViewID .status-bar .btn-save"),
        btnSaveAsNew: $("#@ViewID .status-bar .btn-save-as-new"),
        btnFullScreen: $("#@ViewID .status-bar .btn-fullscreen"),
        btnCalculate: $("#@ViewID .status-bar .btn-calculate"),
        network: null,
        nodes: @Html.Raw(Model.NodesJSON),
        edges: @Html.Raw(Model.EdgesJSON),
        graphEdit: {
            newEdgeStartNode: null,
            newEdgeEndNode: null
        }
    };

    $(document).ready(() => {
        var viewDataObj = @(ViewDataObj);

        GraphCanvas.Initialize(viewDataObj);
    });
</script>