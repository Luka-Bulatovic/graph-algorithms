@model AddToCustomSetModel
@{
    string ViewID = string.Format("AddToCustomSet_{0}", Guid.NewGuid().ToString().Replace("-", ""));
    string ViewDataObj = string.Format("{0}_ViewData", ViewID);
}

<div class="w-full mb-2 custom-graph-set-buttons-container hidden">
    <button type="button" class="btn-add-to-custom-set">
        <i class="fas fa-add"></i> Add to Custom Set
    </button>
    <button type="button" class="btn-save-as-custom-set">
        <i class="fas fa-save"></i> Save as new Custom Set
    </button>
</div>

<!-- Modal for Custom Graph Set -->
<div id="custom-set-modal" class="hidden modal z-100">
    <div class="modal-content">
        <div class="modal-title"></div>
        <form action="@Url.Action("SaveToCustomSet", "CustomGraphSets")" method="post">
            <div class="modal-body">
                <input type="hidden" asp-for="CustomGraphClassSaveType" id="CustomGraphClassSaveType" name="CustomGraphClassSaveType" />
                <input type="hidden" asp-for="SelectedGraphIDs" id="SelectedGraphIDs" name="SelectedGraphIDs" />

                <label asp-for="NewCustomSetName" class="hidden form-label new-custom-set-fields"></label>
                <input type="text" asp-for="NewCustomSetName" name="NewCustomSetName" class="hidden form-input-field new-custom-set-fields" />

                <label asp-for="ExistingCustomSet" class="hidden form-label existing-custom-set-fields"></label>
                <select asp-for="ExistingCustomSetID" name="ExistingCustomSetID" asp-items="Model.ExistingCustomSet" class="hidden existing-custom-set-fields sl-searchby mr-2 form-input-field">
                    <option value="-1">- Please select -</option>
                </select>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn-confirm-modal">Accept</button>
                <button type="button" class="btn-close-modal">Close</button>
            </div>
        </form>
    </div>
</div>


<script type="text/javascript">
    $(document).ready(() => {
        var @(ViewDataObj) = {
            SelectedGraphIDs: [],
            onSelectedGraphsChanged: function() {
                if (@(ViewDataObj).SelectedGraphIDs.length > 0) {
                    $(".custom-graph-set-buttons-container").removeClass("hidden");
                }
                else {
                    $(".custom-graph-set-buttons-container").addClass("hidden");
                }

                $("#SelectedGraphIDs").val(@(ViewDataObj).SelectedGraphIDs.join());
            }
        };

        $(".btn-add-to-custom-set").on('click', (e) => {
            $(".modal-title").html("Add to Existing Custom Graph Set");
            $("#CustomGraphClassSaveType").val(1);

            $(".existing-custom-set-fields").removeClass("hidden");
            $(".new-custom-set-fields").addClass("hidden");

            $("#custom-set-modal").removeClass("hidden");
        });

        $(".btn-save-as-custom-set").on('click', (e) => {
            $(".modal-title").html("Save as New Custom Graph Set");
            $("#CustomGraphClassSaveType").val(2);

            $(".new-custom-set-fields").removeClass("hidden");
            $(".existing-custom-set-fields").addClass("hidden");

            $("#custom-set-modal").removeClass("hidden");
        });

        $(".btn-close-modal").on('click', (e) => {
            $("#custom-set-modal").addClass("hidden");
        });

        EventBus.on('customSetGraphAdd', (e) => {
            if (e.detail.id == null)
                return;

            let index = @(ViewDataObj).SelectedGraphIDs.indexOf(e.detail.id);
            if(index == -1)
                @(ViewDataObj).SelectedGraphIDs.push(e.detail.id);

            @(ViewDataObj).onSelectedGraphsChanged();
        });
        
        EventBus.on('customSetGraphDelete', (e) => {
            if (e.detail.id == null)
                return;

            let index = @(ViewDataObj).SelectedGraphIDs.indexOf(e.detail.id);
            if (index > -1)
                @(ViewDataObj).SelectedGraphIDs.splice(index, 1);

            @(ViewDataObj).onSelectedGraphsChanged();
        });
    });
</script>