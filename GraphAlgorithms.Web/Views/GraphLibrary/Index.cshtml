@using GraphAlgorithms.Shared;
@using static GraphAlgorithms.Shared.Shared;
@model GraphLibraryModel

@{
    int itemsPerRow = 3;
    int numberOfRows = (int)Math.Ceiling((decimal)Model.Graphs.Count / (decimal)itemsPerRow);

    List<GraphPropertyEnum> propertiesToSkipInPropertiesCol =
        new List<GraphPropertyEnum>() { GraphPropertyEnum.Order, GraphPropertyEnum.Size, GraphPropertyEnum.WienerIndex };

}

<div class="container">
    <h1 class="font-semibold text-2xl mb-8">@Model.Heading</h1>

    <!-- Search -->
    <div class="w-full">
        @Html.Partial("_Search", Model.SearchModel)
    </div>

    @if (Model.AllowAddingToCustomGraphSets)
    {
        <div class="w-full mb-2 custom-graph-set-buttons-container hidden">
            <button type="button" class="btn-add-to-custom-set">
                <i class="fas fa-add"></i> Add to Custom Set
            </button>
            <button type="button" class="btn-save-as-custom-set">
                <i class="fas fa-save"></i> Save as new Custom Set
            </button>
        </div>

        <!-- Modal for Custom Graph Set -->
        <div id="custom-set-modal" class="hidden modal z-100">
            <div class="modal-content">
                <div class="modal-title">Modal Title</div>
                <form action="@Url.Action("SaveToCustomSet", "CustomGraphSets")" method="post">
                    <div class="modal-body">
                        <input type="hidden" asp-for="CustomSetModel.CustomGraphClassSaveType" id="CustomGraphClassSaveType" name="CustomGraphClassSaveType" />
                        <input type="hidden" asp-for="CustomSetModel.SelectedGraphIDs" id="SelectedGraphIDs" name="SelectedGraphIDs" />

                        <label asp-for="CustomSetModel.NewCustomSetName" class="hidden form-label new-custom-set-fields"></label>
                        <input type="text" asp-for="CustomSetModel.NewCustomSetName" name="NewCustomSetName" class="hidden form-input-field new-custom-set-fields" />

                        <label asp-for="CustomSetModel.ExistingCustomSet" class="hidden form-label existing-custom-set-fields"></label>
                        <select asp-for="CustomSetModel.ExistingCustomSetID" name="ExistingCustomSetID" asp-items="Model.CustomSetModel.ExistingCustomSet" class="hidden existing-custom-set-fields sl-searchby mr-2 form-input-field">
                            <option value="-1">- Please select -</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn-confirm-modal">Accept</button>
                        <button type="button" class="btn-close-modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    }

    <div class="flex flex-row justify-end mb-2">
        <button type="button" class="btn-grid-view-type @(Model.ViewType == GraphLibraryViewType.Grid ? "bg-gray-300" : "bg-gray-200") p-2 hover:bg-gray-300 mr-2 rounded">
            <i class="fa-solid fa-grip"></i>
        </button>
        <button type="button" class="btn-table-view-type @(Model.ViewType == GraphLibraryViewType.Table ? "bg-gray-300" : "bg-gray-200") p-2 hover:bg-gray-300 rounded">
            <i class="fa-solid fa-bars"></i>
        </button>
    </div>

    @if(Model.ViewType == GraphLibraryViewType.Grid)
    {
        @for (int i = 0; i < numberOfRows; i++)
        {
            <div class="library-row w-full flex flex-row">
                @for (int j = 0; j < itemsPerRow; j++)
                {
                    if (i * itemsPerRow + j < Model.Graphs.Count)
                    {
                        <div class="library-item w-1/3 mr-2 mb-2 h-192 relative">
                            <input type="checkbox" class="graph-selector absolute top-1 right-1 z-40" value="@Model.Graphs[i * itemsPerRow + j].id" />
                            @{
                                var model = new GraphCanvasModel(
                                Model.Graphs[i * itemsPerRow + j],
                                showEditButton: true
                                );
                            }
                            @Html.Partial("_GraphCanvas", model)
                        </div>
                    }
                }
            </div>
        }

        if(Model.Graphs.Count == 0)
        {
            <div class="flex-row text-center p-2 bg-gray-200">No Data</div>
        }
    }
    else if(Model.ViewType == GraphLibraryViewType.Table)
    {
        <div class="overflow-x-auto library-table">
            <table class="w-full border border-gray-200 bg-white">
                <thead>
                    <tr class="bg-gray-200 text-gray-700 text-sm">
                        <th class="border px-4 py-2">ID</th>
                        <th class="border px-4 py-2">Order</th>
                        <th class="border px-4 py-2">Size</th>
                        <th class="border px-4 py-2">Wiener Index</th>
                        <th class="border px-4 py-2">Classes</th>
                        <th class="border px-4 py-2">Properties</th>
                        <th class="border px-4 py-2"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var graph in Model.Graphs)
                    {
                        <tr class="hover:bg-gray-100 text-sm text-gray-700">
                            <td class="border px-4 py-2">@graph.id</td>
                            <td class="border px-4 py-2">@graph.properties.Order</td>
                            <td class="border px-4 py-2">@graph.properties.Size</td>
                            <td class="border px-4 py-2">@graph.properties.WienerIndex</td>
                            <td class="border px-4 py-2">@graph.classNames</td>
                            <td class="border px-4 py-2">
                                @* Show Graph additional properties *@
                                @foreach (var propertyMapping in graph.properties.PropertyMappings)
                                {
                                    if (propertiesToSkipInPropertiesCol.Contains(propertyMapping.Key))
                                        continue;

                                    if (propertyMapping.Value.Getter() == null)
                                        continue;

                                    string propertyValueStr = graph.properties.ConvertGraphPropertyToDisplayString(propertyMapping.Value);

                                    <div class="w-full"><b>@(propertyMapping.Value.Name):</b> @(propertyValueStr)</div>
                                }
                            </td>
                            <td class="border px-4 py-2">
                                <button type="button" class="relative p-2 bg-gray-200 btn-preview" data-id="@(graph.id)">
                                    <i class="fa-solid fa-magnifying-glass"></i>
                                </button>
                                <a class="btn-edit p-2 ml-2" href="@Url.Action("Edit", "GraphDrawing", new { id = graph.id })">
                                    <i class="fas fa-pencil-alt"></i> Edit
                                </a>
                                @{
                                    var canvasModel = new GraphCanvasModel(graph, showHeader: false, showFooter: false, isVisible: false, containerClasses: "w-128 h-128 z-10 absolute");
                                }
                                @Html.Partial("_GraphCanvas", canvasModel)
                            </td>
                        </tr>
                    }

                    @if(Model.Graphs.Count == 0)
                    {
                        <tr class="text-center bg-gray-100 text-gray-700">
                            <td colspan="7">No Data</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }


    <!-- Pagination -->
    @Html.Partial("_Pagination", Model.PaginationInfo)

    <script type="text/javascript">
        $(document).ready(function () {
            var ObjectData = {
                SelectedGraphIDs: []
            };

            $('.graph-selector').on('change', function () {
                let isChecked = $(this).is(':checked');
                let value = $(this).val();

                if (isChecked)
                    ObjectData.SelectedGraphIDs.push(value);
                else {
                    let index = ObjectData.SelectedGraphIDs.indexOf(value);

                    if (index > -1)
                        ObjectData.SelectedGraphIDs.splice(index, 1);
                }

                if (ObjectData.SelectedGraphIDs.length > 0) {
                    $(".custom-graph-set-buttons-container").removeClass("hidden");
                }
                else {
                    $(".custom-graph-set-buttons-container").addClass("hidden");
                }

                console.log(ObjectData.SelectedGraphIDs.join());
                $("#SelectedGraphIDs").val(ObjectData.SelectedGraphIDs.join());
            });

            $(".btn-add-to-custom-set").on('click', (e) => {
                $(".modal-title").html("Add to Existing Custom Graph Set");
                $("#CustomGraphClassSaveType").val(1);

                $(".existing-custom-set-fields").removeClass("hidden");
                $(".new-custom-set-fields").addClass("hidden");

                $("#custom-set-modal").removeClass("hidden");
            });

            $(".btn-save-as-custom-set").on('click', (e) => {
                $(".modal-title").html("Save as New Custom Graph Set");
                $("#CustomGraphClassSaveType").val(2);

                $(".new-custom-set-fields").removeClass("hidden");
                $(".existing-custom-set-fields").addClass("hidden");

                $("#custom-set-modal").removeClass("hidden");
            });

            $(".btn-close-modal").on('click', (e) => {
                $("#custom-set-modal").addClass("hidden");
            });

            $(".btn-grid-view-type").on('click', (e) => {
                if (typeof (searchModelDataObj) === 'object') {
                    searchModelDataObj.baseUrl = '/GraphLibrary/Index';
                    searchModelDataObj.btnSearch.trigger('click');
                }
            });

            $(".btn-table-view-type").on('click', (e) => {
                if (typeof (searchModelDataObj) === 'object') {
                    searchModelDataObj.baseUrl = '/GraphLibrary/IndexTable';
                    searchModelDataObj.btnSearch.trigger('click');
                }
            });

            $(".library-table tbody tr .btn-preview")
                .on('mouseenter', function(e) {
                    console.log("Enter", e);
                    let id = $(this).attr("data-id");

                    if (id == null)
                        return;

                    EventBus.emit('showCanvasAtCurrentPos', { id: id, y: e.pageY, x: e.pageX });
                })
                .on('mouseleave', function () {
                    let id = $(this).attr("data-id");

                    if (id == null)
                        return;

                    EventBus.emit('hideCanvas', { id: id });
                });
        });


    </script>
</div>