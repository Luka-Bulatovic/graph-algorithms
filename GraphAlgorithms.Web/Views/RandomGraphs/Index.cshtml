@model RandomGraphsModel

@{
    string ViewDataObj = string.Format("RandomGraphsContainer_ViewData");
}

<div id="random-graphs-container" class="container">
    <h1 class="text-2xl font-bold mb-8">Generate Random Graphs</h1>

    <form asp-action="Save" asp-controller="RandomGraphs" method="post">
        <div class="grid grid-cols-1 gap-y-4">
            <div class="col-span-full">
                <label asp-for="GraphClassID" class="form-label">Class</label>
                <div class="mt-2">
                    <select asp-for="GraphClassID" asp-items="Model.GraphClassList" class="sl-graph-class form-input-field">
                        <option value="0">- Please select -</option>
                    </select>
                </div>
            </div>

            @foreach(var property in Model.PropertiesMetadata)
            {
                // Set correct field type
                string fieldType = "";
                if (property.Value.Type == typeof(int))
                    fieldType = "number";
                // TODO: Add more types here as needed
                else
                    fieldType = "text";




                <label class="form-label">@property.Key.ToString()</label>

                <input
                    type="@(fieldType)"
                    class="form-input-field"
                    name="Data.@(property.Value.FieldName)"
                    id="@(property.Value.FieldName)"
                    value="@(property.Value.Getter())"
                    data-val="true"

                    @* Validation attributes *@
                    @if(property.Value.IsRequired)
                    {
                        @:data-val="true" 
                        @:data-val-required="@property.Value.RequiredErrorMessage"
                    }
                    @if (property.Value.MinValue.HasValue)
                    {
                        @:data-val-range-min="@property.Value.MinValue"
                        @:min="@property.Value.MinValue"
                    }
                    @if (property.Value.MaxValue.HasValue)
                    {
                        @:data-val-range-max="@property.Value.MaxValue"
                        @:max="@property.Value.MaxValue"
                    }
                    @if (property.Value.MinValue.HasValue || property.Value.MaxValue.HasValue)
                    {
                        @:data-val-range="@property.Value.RangeErrorMessage"
                    }
                    @if (property.Value.IsEven)
                    {
                        @:data-val-evenvalue="@property.Value.EvenErrorMessage"
                    }
                    @if(property.Value.LessThanOrEqualToPropertyNames != null && property.Value.LessThanOrEqualToPropertyNames.Length > 0)
                    {
                        @:data-val-lessthanorequaltoproperty="@property.Value.LessThanOrEqualToErrorMessage"
                        @:data-val-lessthanorequaltoproperty-otherpropertynames="@string.Join("##", property.Value.LessThanOrEqualToPropertyNames)"
                    }
                />

                <span data-valmsg-for="Data.@(property.Value.FieldName)" class="text-danger field-validation-valid" data-valmsg-replace="true"></span>
            }

            <div class="number-of-graphs-container @(Model.GraphClassID > 0 ? "" : "hidden")">
                <div class="col-span-full">
                    <label asp-for="TotalNumberOfRandomGraphs" class="form-label"></label>
                    <div class="mt-2">
                        <input asp-for="TotalNumberOfRandomGraphs" type="number" step="1" class="form-input-field">
                    </div>
                    <span asp-validation-for="TotalNumberOfRandomGraphs" class="text-danger"></span>
                </div>
                <div class="col-span-full">
                    <label asp-for="StoreTopNumberOfGraphs" class="form-label"></label>
                    <div class="mt-2">
                        <input asp-for="StoreTopNumberOfGraphs" type="number" step="1" class="form-input-field">
                    </div>
                    <span asp-validation-for="StoreTopNumberOfGraphs" class="text-danger"></span>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-submit mt-4 @(Model.GraphClassID > 0 ? "" : "hidden")">Generate</button>
    </form>
</div>

<script type="text/javascript">
    var @(ViewDataObj) = {
        viewID: "random-graphs-container",
        form: $("#random-graphs-container form"),
        container: $("#random-graphs-container"),
        btnGenerate: $("#random-graphs-container button.btn-submit"),
        numberOfGraphsContainer: $("#random-graphs-container .number-of-graphs-container"),
        graphClassList: $("#random-graphs-container .sl-graph-class"),
        indexAction: '@Url.Action("Index", "RandomGraphs")',
    };

    $(document).ready(() => {
        var viewDataObj = @(ViewDataObj);
        viewDataObj.form.validate(); // Initialize jQuery Validation on your form

        // Ignore validation of elements with ignore-val
        /*var settngs = $.data(viewDataObj.form[0], 'validator').settings;
        settngs.ignore = ".ignore-val";*/

        RandomGraphs.Initialize(viewDataObj);
    });
</script>